<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.16.0"/>
    <errors>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;u&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;u&apos; is reassigned a value before the old one has been used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="57" column="11" info="u is overwritten"/>
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="47" column="11" info="u is assigned"/>
            <symbol>u</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;v&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;v&apos; is reassigned a value before the old one has been used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="58" column="11" info="v is overwritten"/>
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="48" column="11" info="v is assigned"/>
            <symbol>v</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;w&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;w&apos; is reassigned a value before the old one has been used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="59" column="11" info="w is overwritten"/>
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="49" column="11" info="w is assigned"/>
            <symbol>w</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;q&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;q&apos; is reassigned a value before the old one has been used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="54" column="11" info="q is overwritten"/>
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="50" column="11" info="q is assigned"/>
            <symbol>q</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;r&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;r&apos; is reassigned a value before the old one has been used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="55" column="11" info="r is overwritten"/>
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="51" column="11" info="r is assigned"/>
            <symbol>r</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;s&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;s&apos; is reassigned a value before the old one has been used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="56" column="11" info="s is overwritten"/>
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="52" column="11" info="s is assigned"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="111"/>
            <symbol>a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b&apos; can be reduced." verbose="The scope of the variable &apos;b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="114"/>
            <symbol>b</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="117"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="120"/>
            <symbol>d</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e&apos; can be reduced." verbose="The scope of the variable &apos;e&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="123"/>
            <symbol>e</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;f&apos; can be reduced." verbose="The scope of the variable &apos;f&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="126"/>
            <symbol>f</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;g&apos; can be reduced." verbose="The scope of the variable &apos;g&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="129"/>
            <symbol>g</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;h&apos; can be reduced." verbose="The scope of the variable &apos;h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="132"/>
            <symbol>h</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="156"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;q&apos; can be reduced." verbose="The scope of the variable &apos;q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="159"/>
            <symbol>q</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="162"/>
            <symbol>r</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="165"/>
            <symbol>s</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t&apos; can be reduced." verbose="The scope of the variable &apos;t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="168"/>
            <symbol>t</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;u&apos; can be reduced." verbose="The scope of the variable &apos;u&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="171"/>
            <symbol>u</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="174"/>
            <symbol>v</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;w&apos; can be reduced." verbose="The scope of the variable &apos;w&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="177"/>
            <symbol>w</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced." verbose="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="180"/>
            <symbol>x</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="183"/>
            <symbol>y</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z&apos; can be reduced." verbose="The scope of the variable &apos;z&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="186"/>
            <symbol>z</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;nums&apos; can be declared as pointer to const" verbose="Parameter &apos;nums&apos; can be declared as pointer to const" cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="27" column="24" info="Parameter &apos;nums&apos; can be declared as pointer to const"/>
            <symbol>nums</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;queries&apos; can be declared as pointer to const" verbose="Parameter &apos;queries&apos; can be declared as pointer to const" cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="27" column="49" info="Parameter &apos;queries&apos; can be declared as pointer to const"/>
            <symbol>queries</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;returnSize&apos; can be declared as pointer to const" verbose="Parameter &apos;returnSize&apos; can be declared as pointer to const" cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="27" column="80" info="Parameter &apos;returnSize&apos; can be declared as pointer to const"/>
            <symbol>returnSize</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;aa&apos; can be declared as pointer to const" verbose="Variable &apos;aa&apos; can be declared as pointer to const" cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="30" column="10" info="Variable &apos;aa&apos; can be declared as pointer to const"/>
            <symbol>aa</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;bb&apos; can be declared as pointer to const" verbose="Variable &apos;bb&apos; can be declared as pointer to const" cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="31" column="10" info="Variable &apos;bb&apos; can be declared as pointer to const"/>
            <symbol>bb</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;cc&apos; can be declared as pointer to const" verbose="Variable &apos;cc&apos; can be declared as pointer to const" cwe="398" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="32" column="10" info="Variable &apos;cc&apos; can be declared as pointer to const"/>
            <symbol>cc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;aa&apos; is assigned a value that is never used." verbose="Variable &apos;aa&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="30" column="13"/>
            <symbol>aa</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bb&apos; is assigned a value that is never used." verbose="Variable &apos;bb&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="31" column="13"/>
            <symbol>bb</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cc&apos; is assigned a value that is never used." verbose="Variable &apos;cc&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="32" column="13"/>
            <symbol>cc</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;b&apos; is assigned a value that is never used." verbose="Variable &apos;b&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="36" column="11"/>
            <symbol>b</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c&apos; is assigned a value that is never used." verbose="Variable &apos;c&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="37" column="11"/>
            <symbol>c</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d&apos; is assigned a value that is never used." verbose="Variable &apos;d&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="38" column="11"/>
            <symbol>d</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;e&apos; is assigned a value that is never used." verbose="Variable &apos;e&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="39" column="11"/>
            <symbol>e</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;f&apos; is assigned a value that is never used." verbose="Variable &apos;f&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="40" column="11"/>
            <symbol>f</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;g&apos; is assigned a value that is never used." verbose="Variable &apos;g&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="41" column="11"/>
            <symbol>g</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;h&apos; is assigned a value that is never used." verbose="Variable &apos;h&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="42" column="11"/>
            <symbol>h</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;x&apos; is assigned a value that is never used." verbose="Variable &apos;x&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="43" column="11"/>
            <symbol>x</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;y&apos; is assigned a value that is never used." verbose="Variable &apos;y&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="44" column="11"/>
            <symbol>y</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;z&apos; is assigned a value that is never used." verbose="Variable &apos;z&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="45" column="11"/>
            <symbol>z</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="46" column="11"/>
            <symbol>t</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="53" column="11"/>
            <symbol>p</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;q&apos; is assigned a value that is never used." verbose="Variable &apos;q&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="54" column="11"/>
            <symbol>q</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;r&apos; is assigned a value that is never used." verbose="Variable &apos;r&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="55" column="11"/>
            <symbol>r</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s&apos; is assigned a value that is never used." verbose="Variable &apos;s&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="56" column="11"/>
            <symbol>s</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;u&apos; is assigned a value that is never used." verbose="Variable &apos;u&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="57" column="11"/>
            <symbol>u</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v&apos; is assigned a value that is never used." verbose="Variable &apos;v&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="58" column="11"/>
            <symbol>v</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;w&apos; is assigned a value that is never used." verbose="Variable &apos;w&apos; is assigned a value that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="59" column="11"/>
            <symbol>w</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="9"/>
            <symbol>i</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: j" verbose="Unused variable: j" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="12"/>
            <symbol>j</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: k" verbose="Unused variable: k" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="15"/>
            <symbol>k</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: l" verbose="Unused variable: l" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="18"/>
            <symbol>l</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: m" verbose="Unused variable: m" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="21"/>
            <symbol>m</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: n" verbose="Unused variable: n" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="24"/>
            <symbol>n</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: a" verbose="Unused variable: a" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="27"/>
            <symbol>a</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: b" verbose="Unused variable: b" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="30"/>
            <symbol>b</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: c" verbose="Unused variable: c" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="33"/>
            <symbol>c</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: d" verbose="Unused variable: d" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="36"/>
            <symbol>d</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: e" verbose="Unused variable: e" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="39"/>
            <symbol>e</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: f" verbose="Unused variable: f" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="42"/>
            <symbol>f</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: g" verbose="Unused variable: g" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="45"/>
            <symbol>g</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: h" verbose="Unused variable: h" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="48"/>
            <symbol>h</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: x" verbose="Unused variable: x" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="51"/>
            <symbol>x</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: y" verbose="Unused variable: y" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="54"/>
            <symbol>y</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: z" verbose="Unused variable: z" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="57"/>
            <symbol>z</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: t" verbose="Unused variable: t" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="60"/>
            <symbol>t</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: u" verbose="Unused variable: u" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="63"/>
            <symbol>u</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: v" verbose="Unused variable: v" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="66"/>
            <symbol>v</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: w" verbose="Unused variable: w" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="69"/>
            <symbol>w</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: q" verbose="Unused variable: q" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="72"/>
            <symbol>q</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: r" verbose="Unused variable: r" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="75"/>
            <symbol>r</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: s" verbose="Unused variable: s" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="78"/>
            <symbol>s</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: p" verbose="Unused variable: p" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="81"/>
            <symbol>p</symbol>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: o" verbose="Unused variable: o" cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="29" column="153"/>
            <symbol>o</symbol>
        </error>
        <error id="unusedAllocatedMemory" severity="style" msg="Variable &apos;aa&apos; is allocated memory that is never used." verbose="Variable &apos;aa&apos; is allocated memory that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="30" column="28"/>
            <symbol>aa</symbol>
        </error>
        <error id="unusedAllocatedMemory" severity="style" msg="Variable &apos;bb&apos; is allocated memory that is never used." verbose="Variable &apos;bb&apos; is allocated memory that is never used." cwe="563" file0="F:/Benchmark/new/TY/output/c/Medium/3488-closest-equal-element-queries.c">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="31" column="28"/>
            <symbol>bb</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;solveQueries&apos; is never used." verbose="The function &apos;solveQueries&apos; is never used." cwe="561">
            <location file="F:\Benchmark\new\TY\output\c\Medium\3488-closest-equal-element-queries.c" line="27" column="0"/>
            <symbol>solveQueries</symbol>
        </error>
        <error id="checkersReport" severity="information" msg="Active checkers: 108/836 (use --checkers-report=&lt;filename&gt; to see details)" verbose="Active checkers: 108/836 (use --checkers-report=&lt;filename&gt; to see details)"/>
    </errors>
</results>
