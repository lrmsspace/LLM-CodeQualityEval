<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.16.0"/>
    <errors>
        <error id="normalCheckLevelMaxBranches" severity="information" msg="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." verbose="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." file0="F:/Benchmark/GitMaterial_Copilot/ProblemInfoCrawler/output/c/Medium/1510-k-highest-ranked-items-within-a-price-range.c">
            <location file="F:\Benchmark\GitMaterial_Copilot\ProblemInfoCrawler\output\c\Medium\1510-k-highest-ranked-items-within-a-price-range.c" line="0" column="0"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer." cwe="758" file0="F:/Benchmark/GitMaterial_Copilot/ProblemInfoCrawler/output/c/Medium/1510-k-highest-ranked-items-within-a-price-range.c">
            <location file="F:\Benchmark\GitMaterial_Copilot\ProblemInfoCrawler\output\c\Medium\1510-k-highest-ranked-items-within-a-price-range.c" line="120" column="39"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer." cwe="758" file0="F:/Benchmark/GitMaterial_Copilot/ProblemInfoCrawler/output/c/Medium/1510-k-highest-ranked-items-within-a-price-range.c">
            <location file="F:\Benchmark\GitMaterial_Copilot\ProblemInfoCrawler\output\c\Medium\1510-k-highest-ranked-items-within-a-price-range.c" line="121" column="39"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer." cwe="758" file0="F:/Benchmark/GitMaterial_Copilot/ProblemInfoCrawler/output/c/Medium/1510-k-highest-ranked-items-within-a-price-range.c">
            <location file="F:\Benchmark\GitMaterial_Copilot\ProblemInfoCrawler\output\c\Medium\1510-k-highest-ranked-items-within-a-price-range.c" line="122" column="39"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer." cwe="758" file0="F:/Benchmark/GitMaterial_Copilot/ProblemInfoCrawler/output/c/Medium/1510-k-highest-ranked-items-within-a-price-range.c">
            <location file="F:\Benchmark\GitMaterial_Copilot\ProblemInfoCrawler\output\c\Medium\1510-k-highest-ranked-items-within-a-price-range.c" line="123" column="13"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;gridColSize&apos; can be declared as pointer to const" verbose="Parameter &apos;gridColSize&apos; can be declared as pointer to const" cwe="398" file0="F:/Benchmark/GitMaterial_Copilot/ProblemInfoCrawler/output/c/Medium/1510-k-highest-ranked-items-within-a-price-range.c">
            <location file="F:\Benchmark\GitMaterial_Copilot\ProblemInfoCrawler\output\c\Medium\1510-k-highest-ranked-items-within-a-price-range.c" line="66" column="58" info="Parameter &apos;gridColSize&apos; can be declared as pointer to const"/>
            <symbol>gridColSize</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;pricing&apos; can be declared as pointer to const" verbose="Parameter &apos;pricing&apos; can be declared as pointer to const" cwe="398" file0="F:/Benchmark/GitMaterial_Copilot/ProblemInfoCrawler/output/c/Medium/1510-k-highest-ranked-items-within-a-price-range.c">
            <location file="F:\Benchmark\GitMaterial_Copilot\ProblemInfoCrawler\output\c\Medium\1510-k-highest-ranked-items-within-a-price-range.c" line="66" column="76" info="Parameter &apos;pricing&apos; can be declared as pointer to const"/>
            <symbol>pricing</symbol>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &apos;start&apos; can be declared as pointer to const" verbose="Parameter &apos;start&apos; can be declared as pointer to const" cwe="398" file0="F:/Benchmark/GitMaterial_Copilot/ProblemInfoCrawler/output/c/Medium/1510-k-highest-ranked-items-within-a-price-range.c">
            <location file="F:\Benchmark\GitMaterial_Copilot\ProblemInfoCrawler\output\c\Medium\1510-k-highest-ranked-items-within-a-price-range.c" line="66" column="107" info="Parameter &apos;start&apos; can be declared as pointer to const"/>
            <symbol>start</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;itemA&apos; can be declared as pointer to const" verbose="Variable &apos;itemA&apos; can be declared as pointer to const" cwe="398" file0="F:/Benchmark/GitMaterial_Copilot/ProblemInfoCrawler/output/c/Medium/1510-k-highest-ranked-items-within-a-price-range.c">
            <location file="F:\Benchmark\GitMaterial_Copilot\ProblemInfoCrawler\output\c\Medium\1510-k-highest-ranked-items-within-a-price-range.c" line="118" column="18" info="Variable &apos;itemA&apos; can be declared as pointer to const"/>
            <symbol>itemA</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;itemB&apos; can be declared as pointer to const" verbose="Variable &apos;itemB&apos; can be declared as pointer to const" cwe="398" file0="F:/Benchmark/GitMaterial_Copilot/ProblemInfoCrawler/output/c/Medium/1510-k-highest-ranked-items-within-a-price-range.c">
            <location file="F:\Benchmark\GitMaterial_Copilot\ProblemInfoCrawler\output\c\Medium\1510-k-highest-ranked-items-within-a-price-range.c" line="119" column="18" info="Variable &apos;itemB&apos; can be declared as pointer to const"/>
            <symbol>itemB</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;highestRankedKItems&apos; is never used." verbose="The function &apos;highestRankedKItems&apos; is never used." cwe="561">
            <location file="F:\Benchmark\GitMaterial_Copilot\ProblemInfoCrawler\output\c\Medium\1510-k-highest-ranked-items-within-a-price-range.c" line="66" column="0"/>
            <symbol>highestRankedKItems</symbol>
        </error>
        <error id="checkersReport" severity="information" msg="Active checkers: 108/836 (use --checkers-report=&lt;filename&gt; to see details)" verbose="Active checkers: 108/836 (use --checkers-report=&lt;filename&gt; to see details)"/>
    </errors>
</results>
